<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Container Software GHSA Feeds</title>
    <link>https://raw.githubusercontent.com/ssst0n3/GHSA-NOTIFY/main/output/feed.xml</link>
    <description></description>
    <managingEditor>ssst0n3@gmail.com (ssst0n3)</managingEditor>
    <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    <item>
      <title>Path Traversal in Docker</title>
      <link>https://github.com/advisories/GHSA-vj3f-3286-r4pf</link>
      <description>Path traversal vulnerability in Docker before 1.3.3 allows remote attackers to write to arbitrary files and bypass a container protection mechanism via a full pathname in a symlink in an (1) image or (2) build in a Dockerfile.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Privilege Escalation in Docker</title>
      <link>https://github.com/advisories/GHSA-wxj3-qwv4-cvfm</link>
      <description>Docker 1.0.0 uses world-readable and world-writable permissions on the management socket, which allows local users to gain privileges via unspecified vectors.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Arbitrary Code Execution in Docker</title>
      <link>https://github.com/advisories/GHSA-5qgp-p5jc-w2rm</link>
      <description>Docker before 1.3.2 allows remote attackers to write to arbitrary files and execute arbitrary code via a (1) symlink or (2) hard link attack in an image archive in a (a) pull or (b) load operation.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Directory Traversal in Docker</title>
      <link>https://github.com/advisories/GHSA-qmmc-jppf-32wv</link>
      <description>Docker before 1.3.3 does not properly validate image IDs, which allows remote attackers to conduct path traversal attacks and spoof repositories via a crafted image in a (1) &#34;docker load&#34; operation or (2) &#34;registry communications.&#34;</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Symlink Attack in Libcontainer and Docker Engine</title>
      <link>https://github.com/advisories/GHSA-g7v2-2qxx-wjrw</link>
      <description>Libcontainer and Docker Engine before 1.6.1 opens the file-descriptor passed to the pid-1 process before performing the chroot, which allows local users to gain privileges via a symlink attack in an image.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Access Restriction Bypass in Docker</title>
      <link>https://github.com/advisories/GHSA-44gg-pmqr-4669</link>
      <description>Docker 1.3.0 through 1.3.1 allows remote attackers to modify the default run profile of image containers and possibly bypass the container by applying unspecified security options to an image.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Arbitrary File Write in Libcontainer</title>
      <link>https://github.com/advisories/GHSA-g44j-7vp3-68cv</link>
      <description>Libcontainer 1.6.0, as used in Docker Engine, allows local users to escape containerization (&#34;mount namespace breakout&#34;) and write to arbitrary file on the host system via a symlink attack in an image when respawning a container.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Man-in-the-Middle (MitM)</title>
      <link>https://github.com/advisories/GHSA-8w94-cf6g-c8mg</link>
      <description>Docker before 1.3.1 and docker-py before 0.5.3 fall back to HTTP when the HTTPS connection to the registry fails, which allows man-in-the-middle attackers to conduct downgrade attacks and obtain authentication and image data by leveraging a network position between the client and the registry to block HTTPS traffic.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Arbitrary Code Execution</title>
      <link>https://github.com/advisories/GHSA-997c-fj8j-rq5h</link>
      <description>Docker 1.3.2 allows remote attackers to execute arbitrary code with root privileges via a crafted (1) image or (2) build in a Dockerfile in an LZMA (.xz) archive, related to the chroot for archive extraction.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>containerd CRI plugin: Insecure handling of image volumes</title>
      <link>https://github.com/advisories/GHSA-crp2-qrr5-8pq7</link>
      <description>### Impact&#xA;&#xA;A bug was found in containerd where containers launched through containerd’s CRI implementation with a specially-crafted image configuration could gain access to read-only copies of arbitrary files and directories on the host.  This may bypass any policy-based enforcement on container setup (including a Kubernetes Pod Security Policy) and expose potentially sensitive information.  Kubernetes and crictl can both be configured to use containerd’s CRI implementation.&#xA;&#xA;### Patches&#xA;&#xA;This bug has been fixed in containerd 1.6.1, 1.5.10 and 1.4.13.  Users should update to these versions to resolve the issue.&#xA;&#xA;### Workarounds&#xA;&#xA;Ensure that only trusted images are used.&#xA;&#xA;### Credits&#xA;&#xA;The containerd project would like to thank Felix Wilhelm of Google Project Zero for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).&#xA;&#xA;### For more information&#xA;&#xA;If you have any questions or comments about this advisory:&#xA;&#xA;* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at [security@containerd.io](mailto:security@containerd.io)</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>containerd CRI plugin: Insecure handling of image volumes</title>
      <link>https://github.com/advisories/GHSA-crp2-qrr5-8pq7</link>
      <description>### Impact&#xA;&#xA;A bug was found in containerd where containers launched through containerd’s CRI implementation with a specially-crafted image configuration could gain access to read-only copies of arbitrary files and directories on the host.  This may bypass any policy-based enforcement on container setup (including a Kubernetes Pod Security Policy) and expose potentially sensitive information.  Kubernetes and crictl can both be configured to use containerd’s CRI implementation.&#xA;&#xA;### Patches&#xA;&#xA;This bug has been fixed in containerd 1.6.1, 1.5.10 and 1.4.13.  Users should update to these versions to resolve the issue.&#xA;&#xA;### Workarounds&#xA;&#xA;Ensure that only trusted images are used.&#xA;&#xA;### Credits&#xA;&#xA;The containerd project would like to thank Felix Wilhelm of Google Project Zero for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).&#xA;&#xA;### For more information&#xA;&#xA;If you have any questions or comments about this advisory:&#xA;&#xA;* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at [security@containerd.io](mailto:security@containerd.io)</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>containerd CRI plugin: Insecure handling of image volumes</title>
      <link>https://github.com/advisories/GHSA-crp2-qrr5-8pq7</link>
      <description>### Impact&#xA;&#xA;A bug was found in containerd where containers launched through containerd’s CRI implementation with a specially-crafted image configuration could gain access to read-only copies of arbitrary files and directories on the host.  This may bypass any policy-based enforcement on container setup (including a Kubernetes Pod Security Policy) and expose potentially sensitive information.  Kubernetes and crictl can both be configured to use containerd’s CRI implementation.&#xA;&#xA;### Patches&#xA;&#xA;This bug has been fixed in containerd 1.6.1, 1.5.10 and 1.4.13.  Users should update to these versions to resolve the issue.&#xA;&#xA;### Workarounds&#xA;&#xA;Ensure that only trusted images are used.&#xA;&#xA;### Credits&#xA;&#xA;The containerd project would like to thank Felix Wilhelm of Google Project Zero for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).&#xA;&#xA;### For more information&#xA;&#xA;If you have any questions or comments about this advisory:&#xA;&#xA;* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at [security@containerd.io](mailto:security@containerd.io)</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Unprivileged pod using `hostPath` can side-step active LSM when it is SELinux</title>
      <link>https://github.com/advisories/GHSA-mvff-h3cj-wj9c</link>
      <description>### Impact&#xA;&#xA;Containers launched through containerd’s CRI implementation on Linux systems which use the SELinux security module and containerd versions since v1.5.0 can cause arbitrary files and directories on the host to be relabeled to match the container process label through the use of specially-configured bind mounts in a hostPath volume. This relabeling elevates permissions for the container, granting full read/write access over the affected files and directories. Kubernetes and crictl can both be configured to use containerd’s CRI implementation.&#xA;&#xA;If you are not using containerd’s CRI implementation (through one of the mechanisms described above), you are not affected by this issue.&#xA;&#xA;### Patches&#xA;&#xA;This bug has been fixed in containerd 1.5.9.  Because file labels persist independently of containerd, users should both update to these versions as soon as they are released and validate that all files on their host are correctly labeled.&#xA;&#xA;### Workarounds&#xA;&#xA;Ensure that no sensitive files or directories are used as a hostPath volume source location.  Policy enforcement mechanisms such a Kubernetes Pod Security Policy [AllowedHostPaths](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems) may be specified to limit the files and directories that can be bind-mounted to containers.&#xA;&#xA;### For more information&#xA;&#xA;If you have any questions or comments about this advisory:&#xA;&#xA;* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at [security@containerd.io](mailto:security@containerd.io)</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Ambiguous OCI manifest parsing</title>
      <link>https://github.com/advisories/GHSA-5j5w-g665-5m35</link>
      <description>### Impact&#xA;&#xA;In the OCI Distribution Specification version 1.0.0 and prior and in the OCI Image Specification version 1.0.1 and prior, manifest and index documents are ambiguous without an accompanying Content-Type HTTP header.  Versions of containerd prior to 1.4.12 and 1.5.8 treat the Content-Type header as trusted and deserialize the document according to that header.  If the Content-Type header changed between pulls of the same ambiguous document (with the same digest), the document may be interpreted differently, meaning that the digest alone is insufficient to unambiguously identify the content of the image.&#xA;&#xA;### Patches&#xA;&#xA;This issue has been fixed in containerd 1.4.12 and 1.5.8.  Image pulls for manifests that contain a “manifests” field or indices which contain a “layers” field are rejected.&#xA;&#xA;### Workarounds&#xA;&#xA;Ensure you only pull images from trusted sources.&#xA;&#xA;### References&#xA;&#xA;https://github.com/opencontainers/distribution-spec/security/advisories/GHSA-mc8v-mgrf-8f4m&#xA;https://github.com/opencontainers/image-spec/security/advisories/GHSA-77vh-xpmg-72qh&#xA;&#xA;### For more information&#xA;If you have any questions or comments about this advisory:&#xA;* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at [security@containerd.io](mailto:security@containerd.io)</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Ambiguous OCI manifest parsing</title>
      <link>https://github.com/advisories/GHSA-5j5w-g665-5m35</link>
      <description>### Impact&#xA;&#xA;In the OCI Distribution Specification version 1.0.0 and prior and in the OCI Image Specification version 1.0.1 and prior, manifest and index documents are ambiguous without an accompanying Content-Type HTTP header.  Versions of containerd prior to 1.4.12 and 1.5.8 treat the Content-Type header as trusted and deserialize the document according to that header.  If the Content-Type header changed between pulls of the same ambiguous document (with the same digest), the document may be interpreted differently, meaning that the digest alone is insufficient to unambiguously identify the content of the image.&#xA;&#xA;### Patches&#xA;&#xA;This issue has been fixed in containerd 1.4.12 and 1.5.8.  Image pulls for manifests that contain a “manifests” field or indices which contain a “layers” field are rejected.&#xA;&#xA;### Workarounds&#xA;&#xA;Ensure you only pull images from trusted sources.&#xA;&#xA;### References&#xA;&#xA;https://github.com/opencontainers/distribution-spec/security/advisories/GHSA-mc8v-mgrf-8f4m&#xA;https://github.com/opencontainers/image-spec/security/advisories/GHSA-77vh-xpmg-72qh&#xA;&#xA;### For more information&#xA;If you have any questions or comments about this advisory:&#xA;* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at [security@containerd.io](mailto:security@containerd.io)</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Insufficiently restricted permissions on plugin directories</title>
      <link>https://github.com/advisories/GHSA-c2h3-6mxw-7mvq</link>
      <description>### Impact&#xA;A bug was found in containerd where container root directories and some plugins had insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as setuid), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files.&#xA;&#xA;### Patches&#xA;This vulnerability has been fixed in containerd 1.4.11 and containerd 1.5.7. Users should update to these version when they are released and may restart containers or update directory permissions to mitigate the vulnerability.&#xA;&#xA;### Workarounds&#xA;Limit access to the host to trusted users. Update directory permission on container bundles directories. &#xA;&#xA;### For more information&#xA;If you have any questions or comments about this advisory: &#xA;* Open an issue in [github.com/containerd/containerd](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at [security@containerd.io](mailto:security@containerd.io)&#xA;</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Insufficiently restricted permissions on plugin directories</title>
      <link>https://github.com/advisories/GHSA-c2h3-6mxw-7mvq</link>
      <description>### Impact&#xA;A bug was found in containerd where container root directories and some plugins had insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as setuid), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files.&#xA;&#xA;### Patches&#xA;This vulnerability has been fixed in containerd 1.4.11 and containerd 1.5.7. Users should update to these version when they are released and may restart containers or update directory permissions to mitigate the vulnerability.&#xA;&#xA;### Workarounds&#xA;Limit access to the host to trusted users. Update directory permission on container bundles directories. &#xA;&#xA;### For more information&#xA;If you have any questions or comments about this advisory: &#xA;* Open an issue in [github.com/containerd/containerd](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at [security@containerd.io](mailto:security@containerd.io)&#xA;</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Archive package allows chmod of file outside of unpack target directory</title>
      <link>https://github.com/advisories/GHSA-c72p-9xmj-rx3w</link>
      <description>## Impact&#xA;&#xA;A bug was found in containerd where pulling and extracting a specially-crafted container image can result in Unix file permission changes for existing files in the host’s filesystem.  Changes to file permissions can deny access to the expected owner of the file, widen access to others, or set extended bits like setuid, setgid, and sticky.  This bug does not directly allow files to be read, modified, or executed without an additional cooperating process.&#xA;&#xA;## Patches&#xA;&#xA;This bug has been fixed in containerd 1.5.4 and 1.4.8.  Users should update to these versions as soon as they are released.  Running containers do not need to be restarted.&#xA;&#xA;## Workarounds&#xA;&#xA;Ensure you only pull images from trusted sources.&#xA;&#xA;Linux security modules (LSMs) like SELinux and AppArmor can limit the files potentially affected by this bug through policies and profiles that prevent containerd from interacting with unexpected files.&#xA;&#xA;## For more information&#xA;&#xA;If you have any questions or comments about this advisory:&#xA;&#xA;* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at security@containerd.io if you think you’ve found a security bug.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Archive package allows chmod of file outside of unpack target directory</title>
      <link>https://github.com/advisories/GHSA-c72p-9xmj-rx3w</link>
      <description>## Impact&#xA;&#xA;A bug was found in containerd where pulling and extracting a specially-crafted container image can result in Unix file permission changes for existing files in the host’s filesystem.  Changes to file permissions can deny access to the expected owner of the file, widen access to others, or set extended bits like setuid, setgid, and sticky.  This bug does not directly allow files to be read, modified, or executed without an additional cooperating process.&#xA;&#xA;## Patches&#xA;&#xA;This bug has been fixed in containerd 1.5.4 and 1.4.8.  Users should update to these versions as soon as they are released.  Running containers do not need to be restarted.&#xA;&#xA;## Workarounds&#xA;&#xA;Ensure you only pull images from trusted sources.&#xA;&#xA;Linux security modules (LSMs) like SELinux and AppArmor can limit the files potentially affected by this bug through policies and profiles that prevent containerd from interacting with unexpected files.&#xA;&#xA;## For more information&#xA;&#xA;If you have any questions or comments about this advisory:&#xA;&#xA;* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)&#xA;* Email us at security@containerd.io if you think you’ve found a security bug.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
    <item>
      <title>Incorrect Authorization in imgcrypt</title>
      <link>https://github.com/advisories/GHSA-8v99-48m9-c8pm</link>
      <description>Imgcrypt implements a function `CheckAuthorization()` that is supposed to check whether a user is authorized to access an encrypted image given the keys that the user has provided on the command line that would enable decryption of the image. The check is to prevent that a user can start a container from an image that has previously been decrypted by another user on the same system and therefore a decrypted version of the image layers may be already available in the cache locally.&#xA;&#xA;The failure occurs when an image with a ManifestList is used and the architecture of the local host is not the first one in the ManifestList. In the version prior to the fix, only the first architecture in the list was tested, which may not have its layers available locally (were not pulled) since it cannot be run on the host architecture. Therefore, the verdict on unavailable layers was that the image could be run anticipating that image run failure would occur later due to the layers not being available. However, this verdict to allow the image to run lead to other architectures in the ManifestList be able to run an image without providing keys if that image had previously been decrypted. The fixed version now skips over irrelevant architectures and tests the Manifest of the local architecture, if available.&#xA;&#xA;Known projects that use the `CheckAuthorization()` of imgcrypt is for example the ctr-enc client tool provided by imgcrypt. In this implementation, the call to `CheckAuthorization()` is used on the client side and could therefore also be easily circumvented by a modified client tool not calling this function.&#xA;&#xA;In relation to the vulnerability in ctr-enc, affected environments would have to allow different users to invoke ctr-enc indirectly using some sort of management stack that gives user indirect access to ctr-enc.&#xA;&#xA;The patch has been applied to imgcrypt v1.1.4. Workarounds may include usage of different namespaces for each remote user.</description>
      <pubDate>Wed, 11 May 2022 06:53:49 +0000</pubDate>
    </item>
  </channel>
</rss>